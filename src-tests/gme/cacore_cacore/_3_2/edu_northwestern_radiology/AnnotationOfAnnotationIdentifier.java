//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, vhudson-jaxb-ri-2.1-520 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2008.10.28 at 10:12:54 AM CDT 
//


package gme.cacore_cacore._3_2.edu_northwestern_radiology;

import javax.xml.bind.annotation.XmlEnum;
import javax.xml.bind.annotation.XmlEnumValue;
import javax.xml.bind.annotation.XmlType;


/**
 * <p>Java class for AnnotationOfAnnotationIdentifier.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * <p>
 * <pre>
 * &lt;simpleType name="AnnotationOfAnnotationIdentifier">
 *   &lt;restriction base="{http://www.w3.org/2001/XMLSchema}string">
 *     &lt;enumeration value="RECIST_Baseline_Sum_of_Longest_Diameter"/>
 *     &lt;enumeration value="RECIST_Follow-up_Sum_of_Longest_Diameter"/>
 *     &lt;enumeration value="Interval_Change"/>
 *     &lt;enumeration value="Summary_Statistic"/>
 *     &lt;enumeration value="Other"/>
 *   &lt;/restriction>
 * &lt;/simpleType>
 * </pre>
 * 
 */
@XmlType(name = "AnnotationOfAnnotationIdentifier")
@XmlEnum
public enum AnnotationOfAnnotationIdentifier {

    @XmlEnumValue("RECIST_Baseline_Sum_of_Longest_Diameter")
    RECIST_BASELINE_SUM_OF_LONGEST_DIAMETER("RECIST_Baseline_Sum_of_Longest_Diameter"),
    @XmlEnumValue("RECIST_Follow-up_Sum_of_Longest_Diameter")
    RECIST_FOLLOW_UP_SUM_OF_LONGEST_DIAMETER("RECIST_Follow-up_Sum_of_Longest_Diameter"),
    @XmlEnumValue("Interval_Change")
    INTERVAL_CHANGE("Interval_Change"),
    @XmlEnumValue("Summary_Statistic")
    SUMMARY_STATISTIC("Summary_Statistic"),
    @XmlEnumValue("Other")
    OTHER("Other");
    private final String value;

    AnnotationOfAnnotationIdentifier(String v) {
        value = v;
    }

    public String value() {
        return value;
    }

    public static AnnotationOfAnnotationIdentifier fromValue(String v) {
        for (AnnotationOfAnnotationIdentifier c: AnnotationOfAnnotationIdentifier.values()) {
            if (c.value.equals(v)) {
                return c;
            }
        }
        throw new IllegalArgumentException(v);
    }

}
